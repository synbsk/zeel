"use strict";

const metadata_1 = require("./metadata");
const bluebird_1 = require("bluebird");
const path = require("path");
const electron_packager_tf_1 = require("electron-packager-tf");
const fs_extra_p_1 = require("fs-extra-p");
const util_1 = require("./util");
const archive_1 = require("./targets/archive");
const minimatch_1 = require("minimatch");
const asarUtil_1 = require("./asarUtil");
const deepAssign = require("deep-assign");
const log_1 = require("./log");
const filter_1 = require("./util/filter");
//noinspection JSUnusedLocalSymbols
const __awaiter = require("./awaiter");
exports.commonTargets = ["dir", "zip", "7z", "tar.xz", "tar.lz", "tar.gz", "tar.bz2"];
exports.DIR_TARGET = "dir";
class PlatformPackager {
    constructor(info) {
        this.info = info;
        this.appInfo = info.appInfo;
        this.options = info.options;
        this.projectDir = info.projectDir;
        this.metadata = info.appInfo.metadata;
        this.devMetadata = info.devMetadata;
        this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname);
        this.customBuildOptions = info.devMetadata.build[this.platform.buildConfigurationKey] || Object.create(null);
        this.resourceList = fs_extra_p_1.readdir(this.buildResourcesDir).catch(e => {
            if (e.code !== "ENOENT") {
                throw e;
            }
            return [];
        });
    }
    get platform() {}
    getCscPassword() {
        const password = this.options.cscKeyPassword;
        if (password == null) {
            log_1.log("CSC_KEY_PASSWORD is not defined, empty password will be used");
            return "";
        } else {
            return password.trim();
        }
    }
    hasOnlyDirTarget() {
        for (let targets of this.options.targets.get(this.platform).values()) {
            for (let t of targets) {
                if (t !== "dir") {
                    return false;
                }
            }
        }
        const targets = normalizeTargets(this.customBuildOptions.target);
        return targets != null && targets.length === 1 && targets[0] === "dir";
    }
    get relativeBuildResourcesDirname() {
        return util_1.use(this.devMetadata.directories, it => it.buildResources) || "build";
    }
    get supportedTargets() {}
    computeAppOutDir(outDir, arch) {
        return path.join(outDir, `${ this.platform.buildConfigurationKey }${ arch === metadata_1.Arch.x64 ? "" : `-${ metadata_1.Arch[arch] }` }`);
    }
    dispatchArtifactCreated(file, artifactName) {
        this.info.eventEmitter.emit("artifactCreated", {
            file: file,
            artifactName: artifactName,
            platform: this.platform
        });
    }
    doPack(options, outDir, appOutDir, arch, customBuildOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const asarOptions = this.computeAsarOptions(customBuildOptions);
            options.initializeApp = (opts, buildDir, appRelativePath) => __awaiter(this, void 0, void 0, function* () {
                const appPath = path.join(buildDir, appRelativePath);
                const resourcesPath = path.dirname(appPath);
                const ignoreFiles = new Set([path.relative(this.info.appDir, outDir), path.relative(this.info.appDir, this.buildResourcesDir)]);
                if (!this.info.isTwoPackageJsonProjectLayoutUsed) {
                    const result = yield bluebird_1.Promise.all([filter_1.listDependencies(this.info.appDir, false), filter_1.listDependencies(this.info.appDir, true)]);
                    const productionDepsSet = new Set(result[1]);
                    // npm returns real path, so, we should use relative path to avoid any mismatch
                    const realAppDirPath = yield fs_extra_p_1.realpath(this.info.appDir);
                    for (let it of result[0]) {
                        if (!productionDepsSet.has(it)) {
                            if (it.startsWith(realAppDirPath)) {
                                it = it.substring(realAppDirPath.length + 1);
                            } else if (it.startsWith(this.info.appDir)) {
                                it = it.substring(this.info.appDir.length + 1);
                            }
                            ignoreFiles.add(it);
                        }
                    }
                }
                let patterns = this.getFilePatterns("files", customBuildOptions);
                if (patterns == null || patterns.length === 0) {
                    patterns = ["**/*"];
                }
                let rawFilter = null;
                const deprecatedIgnore = this.devMetadata.build.ignore;
                if (deprecatedIgnore) {
                    if (typeof deprecatedIgnore === "function") {
                        log_1.log(`"ignore is specified as function, may be new "files" option will be suit your needs? Please see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`);
                    } else {
                        log_1.warn(`"ignore is deprecated, please use "files", see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`);
                    }
                    rawFilter = electron_packager_tf_1.userIgnoreFilter(opts);
                }
                const filter = filter_1.createFilter(this.info.appDir, this.getParsedPatterns(patterns, arch), ignoreFiles, rawFilter);
                const promise = asarOptions == null ? filter_1.copyFiltered(this.info.appDir, appPath, filter, true) : asarUtil_1.createAsarArchive(this.info.appDir, resourcesPath, asarOptions, filter);
                const promises = [promise];
                if (this.info.electronVersion[0] === "0") {
                    // electron release >= 0.37.4 - the default_app/ folder is a default_app.asar file
                    promises.push(fs_extra_p_1.remove(path.join(resourcesPath, "default_app.asar")), fs_extra_p_1.remove(path.join(resourcesPath, "default_app")));
                } else {
                    promises.push(fs_extra_p_1.unlink(path.join(resourcesPath, "default_app.asar")));
                }
                yield bluebird_1.Promise.all(promises);
            });
            yield log_1.task(`Packaging for platform ${ options.platform } ${ options.arch } using electron ${ options.version } to ${ path.relative(this.projectDir, appOutDir) }`, electron_packager_tf_1.pack(options));
            yield this.doCopyExtraFiles(true, appOutDir, arch, customBuildOptions);
            yield this.doCopyExtraFiles(false, appOutDir, arch, customBuildOptions);
            const afterPack = this.devMetadata.build.afterPack;
            if (afterPack != null) {
                yield afterPack({
                    appOutDir: appOutDir,
                    options: options
                });
            }
            yield this.sanityCheckPackage(appOutDir, asarOptions != null);
        });
    }
    computePackOptions(outDir, appOutDir, arch) {
        if (this.devMetadata.build.prune != null) {
            log_1.warn("prune is deprecated â€” development dependencies are never copied in any case");
        }
        //noinspection JSUnusedGlobalSymbols
        const options = deepAssign({
            dir: this.info.appDir,
            "app-bundle-id": this.appInfo.id,
            out: outDir,
            name: this.appInfo.productName,
            productName: this.appInfo.productName,
            platform: this.platform.nodeName,
            arch: metadata_1.Arch[arch],
            version: this.info.electronVersion,
            icon: path.join(this.buildResourcesDir, "icon"),
            overwrite: true,
            "app-version": this.appInfo.version,
            "app-copyright": this.appInfo.copyright,
            "build-version": this.appInfo.buildVersion,
            tmpdir: false,
            generateFinalBasename: () => path.basename(appOutDir)
        }, this.devMetadata.build);
        if (this.platform === metadata_1.Platform.WINDOWS) {
            options["version-string"] = this.appInfo.versionString;
        }
        delete options.osx;
        delete options.win;
        delete options.linux;
        // this option only for windows-installer
        delete options.iconUrl;
        return options;
    }
    computeAsarOptions(customBuildOptions) {
        let result = this.devMetadata.build.asar;
        let platformSpecific = customBuildOptions.asar;
        if (platformSpecific != null) {
            result = platformSpecific;
        }
        if (result === false) {
            return null;
        }
        const buildMetadata = this.devMetadata.build;
        if (buildMetadata["asar-unpack"] != null) {
            log_1.warn("asar-unpack is deprecated, please set as asar.unpack");
        }
        if (buildMetadata["asar-unpack-dir"] != null) {
            log_1.warn("asar-unpack-dir is deprecated, please set as asar.unpackDir");
        }
        if (result == null || result === true) {
            return {
                unpack: buildMetadata["asar-unpack"],
                unpackDir: buildMetadata["asar-unpack-dir"]
            };
        } else {
            return result;
        }
    }
    expandPattern(pattern, arch) {
        return pattern.replace(/\$\{arch}/g, metadata_1.Arch[arch]).replace(/\$\{os}/g, this.platform.buildConfigurationKey).replace(/\$\{\/\*}/g, "{,/**/*,/**/.*}");
    }
    doCopyExtraFiles(isResources, appOutDir, arch, customBuildOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const base = isResources ? this.getResourcesDir(appOutDir) : this.platform === metadata_1.Platform.OSX ? path.join(appOutDir, `${ this.appInfo.productName }.app`, "Contents") : appOutDir;
            const patterns = this.getFilePatterns(isResources ? "extraResources" : "extraFiles", customBuildOptions);
            return patterns == null || patterns.length === 0 ? null : filter_1.copyFiltered(this.projectDir, base, filter_1.createFilter(this.projectDir, this.getParsedPatterns(patterns, arch)));
        });
    }
    getParsedPatterns(patterns, arch) {
        const minimatchOptions = {};
        const parsedPatterns = [];
        for (let i = 0; i < patterns.length; i++) {
            parsedPatterns[i] = new minimatch_1.Minimatch(this.expandPattern(patterns[i], arch), minimatchOptions);
        }
        return parsedPatterns;
    }
    getFilePatterns(name, customBuildOptions) {
        let patterns = this.devMetadata.build[name];
        if (patterns != null && !Array.isArray(patterns)) {
            patterns = [patterns];
        }
        let platformSpecificPatterns = customBuildOptions[name];
        if (platformSpecificPatterns != null) {
            if (!Array.isArray(platformSpecificPatterns)) {
                platformSpecificPatterns = [platformSpecificPatterns];
            }
            return patterns == null ? platformSpecificPatterns : Array.from(new Set(patterns.concat(platformSpecificPatterns)));
        }
        return patterns;
    }
    getResourcesDir(appOutDir) {
        return this.platform === metadata_1.Platform.OSX ? this.getOSXResourcesDir(appOutDir) : path.join(appOutDir, "resources");
    }
    getOSXResourcesDir(appOutDir) {
        return path.join(appOutDir, `${ this.appInfo.productName }.app`, "Contents", "Resources");
    }
    checkFileInPackage(resourcesDir, file, isAsar) {
        return __awaiter(this, void 0, void 0, function* () {
            const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file));
            if (isAsar) {
                yield asarUtil_1.checkFileInPackage(path.join(resourcesDir, "app.asar"), relativeFile);
            } else {
                const outStat = yield util_1.statOrNull(path.join(resourcesDir, "app", relativeFile));
                if (outStat == null) {
                    throw new Error(`Application entry file "${ relativeFile }" does not exist. Seems like a wrong configuration.`);
                } else if (!outStat.isFile()) {
                    throw new Error(`Application entry file "${ relativeFile }" is not a file. Seems like a wrong configuration.`);
                }
            }
        });
    }
    sanityCheckPackage(appOutDir, isAsar) {
        return __awaiter(this, void 0, void 0, function* () {
            const outStat = yield util_1.statOrNull(appOutDir);
            if (outStat == null) {
                throw new Error(`Output directory "${ appOutDir }" does not exist. Seems like a wrong configuration.`);
            } else if (!outStat.isDirectory()) {
                throw new Error(`Output directory "${ appOutDir }" is not a directory. Seems like a wrong configuration.`);
            }
            const mainFile = this.metadata.main || "index.js";
            yield this.checkFileInPackage(this.getResourcesDir(appOutDir), mainFile, isAsar);
        });
    }
    archiveApp(format, appOutDir, outFile) {
        return __awaiter(this, void 0, void 0, function* () {
            return archive_1.archiveApp(this.devMetadata.build.compression, format, outFile, this.platform === metadata_1.Platform.OSX ? path.join(appOutDir, `${ this.appInfo.productName }.app`) : appOutDir);
        });
    }
    generateName(ext, arch, deployment) {
        return this.generateName2(ext, arch === metadata_1.Arch.x64 ? null : metadata_1.Arch[arch], deployment);
    }
    generateName1(ext, arch, classifier, deployment) {
        let c = arch === metadata_1.Arch.x64 ? null : metadata_1.Arch[arch];
        if (c == null) {
            c = classifier;
        } else {
            c += `-${ classifier }`;
        }
        return this.generateName2(ext, c, deployment);
    }
    generateName2(ext, classifier, deployment) {
        return `${ deployment ? this.appInfo.name : this.appInfo.productName }-${ this.metadata.version }${ classifier == null ? "" : `-${ classifier }` }.${ ext }`;
    }
}
exports.PlatformPackager = PlatformPackager;
function getArchSuffix(arch) {
    return arch === metadata_1.Arch.x64 ? "" : `-${ metadata_1.Arch[arch] }`;
}
exports.getArchSuffix = getArchSuffix;
function normalizeTargets(targets) {
    if (targets == null) {
        return null;
    } else {
        return (Array.isArray(targets) ? targets : [targets]).map(it => it.toLowerCase().trim());
    }
}
exports.normalizeTargets = normalizeTargets;
// fpm bug - rpm build --description is not escaped, well... decided to replace quite to smart quote
// http://leancrew.com/all-this/2010/11/smart-quotes-in-javascript/
function smarten(s) {
    // opening singles
    s = s.replace(/(^|[-\u2014\s(\["])'/g, "$1\u2018");
    // closing singles & apostrophes
    s = s.replace(/'/g, "\u2019");
    // opening doubles
    s = s.replace(/(^|[-\u2014/\[(\u2018\s])"/g, "$1\u201c");
    // closing doubles
    s = s.replace(/"/g, "\u201d");
    return s;
}
exports.smarten = smarten;
function computeEffectiveTargets(rawList, targetsFromMetadata) {
    let targets = normalizeTargets(rawList.length === 0 ? targetsFromMetadata : rawList);
    return targets == null ? ["default"] : targets;
}
exports.computeEffectiveTargets = computeEffectiveTargets;
//# sourceMappingURL=platformPackager.js.map