{
  "version": 3,
  "file": "nsis.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/nsis.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { WinPackager } from \"../winPackager\"\nimport { Arch, NsisOptions } from \"../metadata\"\nimport { exec, debug } from \"../util\"\nimport * as path from \"path\"\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport { getBin } from \"../util/binDownload\"\nimport { v5 as uuid5 } from \"uuid-1345\"\nimport { getArchSuffix } from \"../platformPackager\"\nimport { archiveApp } from \"./archive\"\nimport { subTask } from \"../log\"\nimport sanitizeFileName = require(\"sanitize-filename\")\nimport semver = require(\"semver\")\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../awaiter\")\n\nconst NSIS_VERSION = \"nsis-3.0.0-rc.1.2\"\nconst NSIS_SHA2 = \"d96f714ba552a5ebccf2593ed3fee1b072b67e7bfd1b90d66a5eb0cd3ca41d16\"\n\n//noinspection SpellCheckingInspection\nconst ELECTRON_BUILDER_NS_UUID = \"50e065bc-3134-11e6-9bab-38c9862bdaf3\"\n\nconst nsisPathPromise = getBin(\"nsis\", NSIS_VERSION, `https://dl.bintray.com/electron-userland/bin/${NSIS_VERSION}.7z`, NSIS_SHA2)\n\nexport default class NsisTarget {\n  private readonly nsisOptions: NsisOptions\n\n  constructor(private packager: WinPackager, private outDir: string, private appOutDir: string) {\n    this.nsisOptions = packager.info.devMetadata.build.nsis || Object.create(null)\n  }\n\n  async build(arch: Arch) {\n    const packager = this.packager\n\n    const iconPath = await packager.iconPath\n    const appInfo = packager.appInfo\n    const version = appInfo.version\n    const archSuffix = getArchSuffix(arch)\n    const installerPath = path.join(this.outDir, `${appInfo.productName} Setup ${version}${archSuffix}.exe`)\n    // const archiveFile = path.join(this.outDir, `.${packager.metadata.name}-${packager.metadata.version}${archSuffix}.7z`)\n    const archiveFile = path.join(this.outDir, `app.7z`)\n\n    const guid = this.nsisOptions.guid || await BluebirdPromise.promisify(uuid5)({namespace: ELECTRON_BUILDER_NS_UUID, name: appInfo.id})\n    const productName = appInfo.productName\n    const defines: any = {\n      APP_ID: appInfo.id,\n      APP_GUID: guid,\n      PRODUCT_NAME: productName,\n      INST_DIR_NAME: sanitizeFileName(productName),\n      APP_DESCRIPTION: appInfo.description,\n      APP_ARCHIVE: archiveFile,\n      VERSION: version,\n\n      MUI_ICON: iconPath,\n      MUI_UNICON: iconPath,\n\n      COMPANY_NAME: appInfo.companyName,\n    }\n\n    if (this.nsisOptions.perMachine === true) {\n      defines.MULTIUSER_INSTALLMODE_DEFAULT_ALLUSERS = null\n    }\n    else {\n      defines.MULTIUSER_INSTALLMODE_DEFAULT_CURRENTUSER = null\n    }\n\n    if (this.nsisOptions.allowElevation !== false) {\n      defines.MULTIUSER_INSTALLMODE_ALLOW_ELEVATION = null\n    }\n\n    // Error: invalid VIProductVersion format, should be X.X.X.X\n    // so, we must strip beta\n    const parsedVersion = new semver.SemVer(appInfo.version)\n    const commands: any = {\n      OutFile: `\"${installerPath}\"`,\n      // LoadLanguageFile: '\"${NSISDIR}/Contrib/Language files/English.nlf\"',\n      VIProductVersion: `${parsedVersion.major}.${parsedVersion.minor}.${parsedVersion.patch}.${appInfo.buildNumber || \"0\"}`,\n      // VIFileVersion: packager.appInfo.buildVersion,\n      VIAddVersionKey: [\n        `ProductName \"${appInfo.productName}\"`,\n        `CompanyName \"${appInfo.versionString.CompanyName}\"`,\n        `LegalCopyright \"${appInfo.versionString.LegalCopyright}\"`,\n        `FileDescription \"${appInfo.description}\"`,\n        `FileVersion \"${appInfo.buildVersion}\"`,\n      ],\n    }\n\n    if (packager.devMetadata.build.compression === \"store\") {\n      commands.SetCompress = \"off\"\n      defines.COMPRESS = \"off\"\n    }\n    else {\n      commands.SetCompressor = \"lzma\"\n      // default is 8: test app installer size 37.2 vs 36 if dict size 64\n      commands.SetCompressorDictSize = \"64\"\n\n      defines.COMPRESS = \"auto\"\n    }\n\n    await subTask(\"Packing app into 7z archive\", archiveApp(packager.devMetadata.build.compression, \"7z\", archiveFile, this.appOutDir, true))\n\n    const oneClick = this.nsisOptions.oneClick !== false\n    if (oneClick) {\n      defines.ONE_CLICK = null\n    }\n\n    debug(defines)\n    debug(commands)\n\n    await subTask(`Executing makensis`, NsisTarget.executeMakensis(defines, commands))\n    await packager.sign(installerPath)\n\n    this.packager.dispatchArtifactCreated(installerPath, `${appInfo.name}-Setup-${version}${archSuffix}.exe`)\n  }\n\n  private static async executeMakensis(defines: any, commands: any) {\n    const args: Array<string> = []\n    for (let name of Object.keys(defines)) {\n      const value = defines[name]\n      if (value == null) {\n        args.push(`-D${name}`)\n      }\n      else {\n        args.push(`-D${name}=${value}`)\n      }\n    }\n\n    for (let name of Object.keys(commands)) {\n      const value = commands[name]\n      if (Array.isArray(value)) {\n        for (let c of value) {\n          args.push(`-X${name} ${c}`)\n        }\n      }\n      else {\n        args.push(`-X${name} ${value}`)\n      }\n    }\n\n    args.push(path.join(__dirname, \"..\", \"..\", \"templates\", \"nsis\", \"installer.nsi\"))\n\n    const binDir = process.platform === \"darwin\" ? \"mac\" : (process.platform === \"win32\" ? \"Bin\" : \"linux\")\n    const nsisPath = await nsisPathPromise\n    // we use NSIS_CONFIG_CONST_DATA_PATH=no to build makensis on Linux, but in any case it doesn't use stubs as OS X/Windows version, so, we explicitly set NSISDIR\n\n    await exec(path.join(nsisPath, binDir, process.platform === \"win32\" ? \"makensis.exe\" : \"makensis\"), args, {\n      env: Object.assign({}, process.env, {NSISDIR: nsisPath})\n    })\n  }\n}"
  ]
}
