{
  "version": 3,
  "file": "platformPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/platformPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { AppMetadata, DevMetadata, Platform, PlatformSpecificBuildOptions, Arch } from \"./metadata\"\nimport EventEmitter = NodeJS.EventEmitter\nimport { Promise as BluebirdPromise } from \"bluebird\"\nimport * as path from \"path\"\nimport { pack, ElectronPackagerOptions, userIgnoreFilter } from \"electron-packager-tf\"\nimport { readdir, unlink, remove, realpath } from \"fs-extra-p\"\nimport { statOrNull, use } from \"./util\"\nimport { Packager } from \"./packager\"\nimport { AsarOptions } from \"asar\"\nimport { archiveApp } from \"./targets/archive\"\nimport { Minimatch } from \"minimatch\"\nimport { checkFileInPackage, createAsarArchive } from \"./asarUtil\"\nimport deepAssign = require(\"deep-assign\")\nimport { warn, log, task } from \"./log\"\nimport { AppInfo } from \"./appInfo\"\nimport { listDependencies, createFilter, copyFiltered } from \"./util/filter\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"./awaiter\")\n\nexport const commonTargets = [\"dir\", \"zip\", \"7z\", \"tar.xz\", \"tar.lz\", \"tar.gz\", \"tar.bz2\"]\n\nexport const DIR_TARGET = \"dir\"\n\nexport interface PackagerOptions {\n  targets?: Map<Platform, Map<Arch, string[]>>\n\n  projectDir?: string | null\n\n  cscLink?: string | null\n  cscKeyPassword?: string | null\n\n  cscInstallerLink?: string | null\n  cscInstallerKeyPassword?: string | null\n\n  platformPackagerFactory?: ((packager: Packager, platform: Platform, cleanupTasks: Array<() => Promise<any>>) => PlatformPackager<any>) | null\n\n  /**\n   * The same as [development package.json](https://github.com/electron-userland/electron-builder/wiki/Options#development-packagejson).\n   *\n   * Development `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly devMetadata?: DevMetadata\n\n  /**\n   * The same as [application package.json](https://github.com/electron-userland/electron-builder/wiki/Options#AppMetadata).\n   *\n   * Application `package.json` will be still read, but options specified in this object will override.\n   */\n  readonly appMetadata?: AppMetadata\n}\n\nexport interface BuildInfo {\n  options: PackagerOptions\n\n  devMetadata: DevMetadata\n\n  projectDir: string\n  appDir: string\n\n  electronVersion: string\n\n  eventEmitter: EventEmitter\n\n  isTwoPackageJsonProjectLayoutUsed: boolean\n\n  // computed final effective appId\n  appInfo: AppInfo\n}\n\nexport abstract class PlatformPackager<DC extends PlatformSpecificBuildOptions> {\n  protected readonly options: PackagerOptions\n\n  protected readonly projectDir: string\n  readonly buildResourcesDir: string\n\n  readonly metadata: AppMetadata\n  readonly devMetadata: DevMetadata\n\n  readonly customBuildOptions: DC\n\n  readonly resourceList: Promise<Array<string>>\n\n  abstract get platform(): Platform\n\n  readonly appInfo: AppInfo\n\n  constructor(public info: BuildInfo) {\n    this.appInfo = info.appInfo\n    this.options = info.options\n    this.projectDir = info.projectDir\n    this.metadata = info.appInfo.metadata\n    this.devMetadata = info.devMetadata\n\n    this.buildResourcesDir = path.resolve(this.projectDir, this.relativeBuildResourcesDirname)\n    this.customBuildOptions = (<any>info.devMetadata.build)[this.platform.buildConfigurationKey] || Object.create(null)\n\n    this.resourceList = readdir(this.buildResourcesDir)\n      .catch(e => {\n        if (e.code !== \"ENOENT\") {\n          throw e\n        }\n        return []\n      })\n  }\n\n  protected getCscPassword(): string {\n    const password = this.options.cscKeyPassword\n    if (password == null) {\n      log(\"CSC_KEY_PASSWORD is not defined, empty password will be used\")\n      return \"\"\n    }\n    else {\n      return password.trim()\n    }\n  }\n\n  protected hasOnlyDirTarget(): boolean {\n    for (let targets of this.options.targets!.get(this.platform)!.values()) {\n      for (let t of targets) {\n        if (t !== \"dir\") {\n          return false\n        }\n      }\n    }\n\n    const targets = normalizeTargets(this.customBuildOptions.target)\n    return targets != null && targets.length === 1 && targets[0] === \"dir\"\n  }\n\n  get relativeBuildResourcesDirname() {\n    return use(this.devMetadata.directories, it => it!.buildResources) || \"build\"\n  }\n\n  abstract get supportedTargets(): Array<string>\n\n  protected computeAppOutDir(outDir: string, arch: Arch): string {\n    return path.join(outDir, `${this.platform.buildConfigurationKey}${arch === Arch.x64 ? \"\" : `-${Arch[arch]}`}`)\n  }\n\n  dispatchArtifactCreated(file: string, artifactName?: string) {\n    this.info.eventEmitter.emit(\"artifactCreated\", {\n      file: file,\n      artifactName: artifactName,\n      platform: this.platform,\n    })\n  }\n\n  abstract pack(outDir: string, arch: Arch, targets: Array<string>, postAsyncTasks: Array<Promise<any>>): Promise<any>\n\n  protected async doPack(options: ElectronPackagerOptions, outDir: string, appOutDir: string, arch: Arch, customBuildOptions: DC) {\n    const asarOptions = this.computeAsarOptions(customBuildOptions)\n    options.initializeApp = async (opts, buildDir, appRelativePath) => {\n      const appPath = path.join(buildDir, appRelativePath)\n      const resourcesPath = path.dirname(appPath)\n\n      const ignoreFiles = new Set([path.relative(this.info.appDir, outDir), path.relative(this.info.appDir, this.buildResourcesDir)])\n      if (!this.info.isTwoPackageJsonProjectLayoutUsed) {\n        const result = await BluebirdPromise.all([listDependencies(this.info.appDir, false), listDependencies(this.info.appDir, true)])\n        const productionDepsSet = new Set(result[1])\n\n        // npm returns real path, so, we should use relative path to avoid any mismatch\n        const realAppDirPath = await realpath(this.info.appDir)\n\n        for (let it of result[0]) {\n          if (!productionDepsSet.has(it)) {\n            if (it.startsWith(realAppDirPath)) {\n              it = it.substring(realAppDirPath.length + 1)\n            }\n            else if (it.startsWith(this.info.appDir)) {\n              it = it.substring(this.info.appDir.length + 1)\n            }\n            ignoreFiles.add(it)\n          }\n        }\n      }\n\n      let patterns = this.getFilePatterns(\"files\", customBuildOptions)\n      if (patterns == null || patterns.length === 0) {\n        patterns = [\"**/*\"]\n      }\n\n      let rawFilter: any = null\n      const deprecatedIgnore = (<any>this.devMetadata.build).ignore\n      if (deprecatedIgnore) {\n        if (typeof deprecatedIgnore === \"function\") {\n          log(`\"ignore is specified as function, may be new \"files\" option will be suit your needs? Please see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`)\n        }\n        else {\n          warn(`\"ignore is deprecated, please use \"files\", see https://github.com/electron-userland/electron-builder/wiki/Options#BuildMetadata-files`)\n        }\n        rawFilter = userIgnoreFilter(opts)\n      }\n\n      const filter = createFilter(this.info.appDir, this.getParsedPatterns(patterns, arch), ignoreFiles, rawFilter)\n      const promise = asarOptions == null ?\n        copyFiltered(this.info.appDir, appPath, filter, true)\n        : createAsarArchive(this.info.appDir, resourcesPath, asarOptions, filter)\n\n      const promises = [promise]\n      if (this.info.electronVersion[0] === \"0\") {\n        // electron release >= 0.37.4 - the default_app/ folder is a default_app.asar file\n        promises.push(remove(path.join(resourcesPath, \"default_app.asar\")), remove(path.join(resourcesPath, \"default_app\")))\n      }\n      else {\n        promises.push(unlink(path.join(resourcesPath, \"default_app.asar\")))\n      }\n\n      await BluebirdPromise.all(promises)\n    }\n    await task(`Packaging for platform ${options.platform} ${options.arch} using electron ${options.version} to ${path.relative(this.projectDir, appOutDir)}`, pack(options))\n\n    await this.doCopyExtraFiles(true, appOutDir, arch, customBuildOptions)\n    await this.doCopyExtraFiles(false, appOutDir, arch, customBuildOptions)\n\n    const afterPack = this.devMetadata.build.afterPack\n    if (afterPack != null) {\n      await afterPack({\n        appOutDir: appOutDir,\n        options: options,\n      })\n    }\n\n    await this.sanityCheckPackage(appOutDir, asarOptions != null)\n  }\n\n  protected computePackOptions(outDir: string, appOutDir: string, arch: Arch): ElectronPackagerOptions {\n    if ((<any>this.devMetadata.build).prune != null) {\n      warn(\"prune is deprecated — development dependencies are never copied in any case\")\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    const options: any = deepAssign({\n      dir: this.info.appDir,\n      \"app-bundle-id\": this.appInfo.id,\n      out: outDir,\n      name: this.appInfo.productName,\n      productName: this.appInfo.productName,\n      platform: this.platform.nodeName,\n      arch: Arch[arch],\n      version: this.info.electronVersion,\n      icon: path.join(this.buildResourcesDir, \"icon\"),\n      overwrite: true,\n      \"app-version\": this.appInfo.version,\n      \"app-copyright\": this.appInfo.copyright,\n      \"build-version\": this.appInfo.buildVersion,\n      tmpdir: false,\n      generateFinalBasename: () => path.basename(appOutDir),\n    }, this.devMetadata.build)\n\n    if (this.platform === Platform.WINDOWS) {\n      options[\"version-string\"] = this.appInfo.versionString\n    }\n\n    delete options.osx\n    delete options.win\n    delete options.linux\n    // this option only for windows-installer\n    delete options.iconUrl\n    return options\n  }\n\n  private computeAsarOptions(customBuildOptions: DC): AsarOptions | null {\n    let result = this.devMetadata.build.asar\n    let platformSpecific = customBuildOptions.asar\n    if (platformSpecific != null) {\n      result = platformSpecific\n    }\n\n    if (result === false) {\n      return null\n    }\n\n    const buildMetadata = <ElectronPackagerOptions>this.devMetadata.build\n    if (buildMetadata[\"asar-unpack\"] != null) {\n      warn(\"asar-unpack is deprecated, please set as asar.unpack\")\n    }\n    if (buildMetadata[\"asar-unpack-dir\"] != null) {\n      warn(\"asar-unpack-dir is deprecated, please set as asar.unpackDir\")\n    }\n\n    if (result == null || result === true) {\n      return {\n        unpack: buildMetadata[\"asar-unpack\"],\n        unpackDir: buildMetadata[\"asar-unpack-dir\"]\n      }\n    }\n    else {\n      return result\n    }\n  }\n\n  private expandPattern(pattern: string, arch: Arch): string {\n    return pattern\n      .replace(/\\$\\{arch}/g, Arch[arch])\n      .replace(/\\$\\{os}/g, this.platform.buildConfigurationKey)\n      .replace(/\\$\\{\\/\\*}/g, \"{,/**/*,/**/.*}\")\n  }\n\n  private async doCopyExtraFiles(isResources: boolean, appOutDir: string, arch: Arch, customBuildOptions: DC): Promise<any> {\n    const base = isResources ? this.getResourcesDir(appOutDir) : this.platform === Platform.OSX ? path.join(appOutDir, `${this.appInfo.productName}.app`, \"Contents\") : appOutDir\n    const patterns = this.getFilePatterns(isResources ? \"extraResources\" : \"extraFiles\", customBuildOptions)\n    return patterns == null || patterns.length === 0 ? null : copyFiltered(this.projectDir, base, createFilter(this.projectDir, this.getParsedPatterns(patterns, arch)))\n  }\n\n  private getParsedPatterns(patterns: Array<string>, arch: Arch): Array<Minimatch> {\n    const minimatchOptions = {}\n    const parsedPatterns: Array<Minimatch> = []\n    for (let i = 0; i < patterns.length; i++) {\n      parsedPatterns[i] = new Minimatch(this.expandPattern(patterns[i], arch), minimatchOptions)\n    }\n    return parsedPatterns\n  }\n\n  private getFilePatterns(name: \"files\" | \"extraFiles\" | \"extraResources\", customBuildOptions: DC): Array<string> | n {\n    let patterns: Array<string> | string | n = (<any>this.devMetadata.build)[name]\n    if (patterns != null && !Array.isArray(patterns)) {\n      patterns = [patterns]\n    }\n\n    let platformSpecificPatterns: Array<string> | string | n = (<any>customBuildOptions)[name]\n    if (platformSpecificPatterns != null) {\n      if (!Array.isArray(platformSpecificPatterns)) {\n        platformSpecificPatterns = [platformSpecificPatterns]\n      }\n      return patterns == null ? platformSpecificPatterns : Array.from(new Set(patterns.concat(platformSpecificPatterns)))\n    }\n    return patterns\n  }\n\n  private getResourcesDir(appOutDir: string): string {\n    return this.platform === Platform.OSX ? this.getOSXResourcesDir(appOutDir) : path.join(appOutDir, \"resources\")\n  }\n\n  private getOSXResourcesDir(appOutDir: string): string {\n    return path.join(appOutDir, `${this.appInfo.productName}.app`, \"Contents\", \"Resources\")\n  }\n\n  private async checkFileInPackage(resourcesDir: string, file: string, isAsar: boolean) {\n    const relativeFile = path.relative(this.info.appDir, path.resolve(this.info.appDir, file))\n    if (isAsar) {\n      await checkFileInPackage(path.join(resourcesDir, \"app.asar\"), relativeFile)\n    }\n    else {\n      const outStat = await statOrNull(path.join(resourcesDir, \"app\", relativeFile))\n      if (outStat == null) {\n        throw new Error(`Application entry file \"${relativeFile}\" does not exist. Seems like a wrong configuration.`)\n      }\n      else if (!outStat.isFile()) {\n        throw new Error(`Application entry file \"${relativeFile}\" is not a file. Seems like a wrong configuration.`)\n      }\n    }\n  }\n\n  private async sanityCheckPackage(appOutDir: string, isAsar: boolean): Promise<any> {\n    const outStat = await statOrNull(appOutDir)\n\n    if (outStat == null) {\n      throw new Error(`Output directory \"${appOutDir}\" does not exist. Seems like a wrong configuration.`)\n    }\n    else if (!outStat.isDirectory()) {\n      throw new Error(`Output directory \"${appOutDir}\" is not a directory. Seems like a wrong configuration.`)\n    }\n\n    const mainFile = this.metadata.main || \"index.js\"\n    await this.checkFileInPackage(this.getResourcesDir(appOutDir), mainFile, isAsar)\n  }\n\n  protected async archiveApp(format: string, appOutDir: string, outFile: string): Promise<any> {\n    return archiveApp(this.devMetadata.build.compression, format, outFile, this.platform === Platform.OSX ? path.join(appOutDir, `${this.appInfo.productName}.app`) : appOutDir)\n  }\n\n  generateName(ext: string, arch: Arch, deployment: boolean): string {\n    return this.generateName2(ext, arch === Arch.x64 ? null : Arch[arch], deployment)\n  }\n\n  generateName1(ext: string, arch: Arch, classifier: string, deployment: boolean): string {\n    let c = arch === Arch.x64 ? null : Arch[arch]\n    if (c == null) {\n      c = classifier\n    }\n    else {\n      c += `-${classifier}`\n    }\n    return this.generateName2(ext, c, deployment)\n  }\n\n  generateName2(ext: string, classifier: string | n, deployment: boolean): string {\n    return `${deployment ? this.appInfo.name : this.appInfo.productName}-${this.metadata.version}${classifier == null ? \"\" : `-${classifier}`}.${ext}`\n  }\n}\n\nexport function getArchSuffix(arch: Arch): string {\n  return arch === Arch.x64 ? \"\" : `-${Arch[arch]}`\n}\n\nexport interface ArtifactCreated {\n  readonly file: string\n  readonly artifactName?: string\n\n  readonly platform: Platform\n}\n\nexport function normalizeTargets(targets: Array<string> | string | null | undefined): Array<string> | null {\n  if (targets == null) {\n    return null\n  }\n  else {\n    return (Array.isArray(targets) ? targets : [targets]).map(it => it.toLowerCase().trim())\n  }\n}\n\n// fpm bug - rpm build --description is not escaped, well... decided to replace quite to smart quote\n// http://leancrew.com/all-this/2010/11/smart-quotes-in-javascript/\nexport function smarten(s: string): string {\n  // opening singles\n  s = s.replace(/(^|[-\\u2014\\s(\\[\"])'/g, \"$1\\u2018\")\n  // closing singles & apostrophes\n  s = s.replace(/'/g, \"\\u2019\")\n  // opening doubles\n  s = s.replace(/(^|[-\\u2014/\\[(\\u2018\\s])\"/g, \"$1\\u201c\")\n  // closing doubles\n  s = s.replace(/\"/g, \"\\u201d\")\n  return s\n}\n\nexport function computeEffectiveTargets(rawList: Array<string>, targetsFromMetadata: Array<string> | n): Array<string> {\n  let targets = normalizeTargets(rawList.length === 0 ? targetsFromMetadata : rawList)\n  return targets == null ? [\"default\"] : targets\n}"
  ]
}
