"use strict";

const asar_1 = require("asar");
const util_1 = require("./util");
const fs_extra_p_1 = require("fs-extra-p");
const bluebird_1 = require("bluebird");
const path = require("path");
//noinspection JSUnusedLocalSymbols
const __awaiter = require("./awaiter");
const concurrency = { concurrency: 50 };
function walk(dirPath, consumer, filter) {
    return fs_extra_p_1.readdir(dirPath).then(names => {
        return bluebird_1.Promise.map(names, name => {
            const filePath = dirPath + path.sep + name;
            if (!filter(filePath)) {
                return null;
            }
            return fs_extra_p_1.lstat(filePath).then(stat => {
                consumer(filePath, stat);
                if (stat.isDirectory()) {
                    return walk(filePath, consumer, filter);
                }
                return null;
            });
        }, concurrency);
    });
}
function createAsarArchive(src, resourcesPath, options, filter) {
    return __awaiter(this, void 0, void 0, function* () {
        const metadata = {};
        const files = [];
        yield walk(src, (it, stat) => {
            files.push(it);
            metadata[it] = {
                type: stat.isFile() ? "file" : stat.isDirectory() ? "directory" : "link",
                stat: stat
            };
        }, filter);
        yield bluebird_1.Promise.promisify(asar_1.createPackageFromFiles)(src, path.join(resourcesPath, "app.asar"), files, metadata, options);
    });
}
exports.createAsarArchive = createAsarArchive;
function checkFileInPackage(asarFile, relativeFile) {
    return __awaiter(this, void 0, void 0, function* () {
        let stat;
        try {
            stat = asar_1.statFile(asarFile, relativeFile);
        } catch (e) {
            const fileStat = yield util_1.statOrNull(asarFile);
            if (fileStat == null) {
                throw new Error(`File "${ asarFile }" does not exist. Seems like a wrong configuration.`);
            }
            try {
                asar_1.listPackage(asarFile);
            } catch (e) {
                throw new Error(`File "${ asarFile }" is corrupted: ${ e }`);
            }
            // asar throws error on access to undefined object (info.link)
            stat = null;
        }
        if (stat == null) {
            throw new Error(`Application entry file "${ relativeFile }" in the "${ asarFile }" does not exist. Seems like a wrong configuration.`);
        }
        if (stat.size === 0) {
            throw new Error(`Application entry file "${ relativeFile }" in the "${ asarFile }" is corrupted: size 0`);
        }
    });
}
exports.checkFileInPackage = checkFileInPackage;
//# sourceMappingURL=asarUtil.js.map