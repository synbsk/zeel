{
  "version": 3,
  "file": "filter.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/filter.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { copy } from \"fs-extra-p\"\nimport { Minimatch } from \"minimatch\"\nimport { exec } from \"../util\"\nimport * as path from \"path\"\n\n//noinspection JSUnusedLocalSymbols\nconst __awaiter = require(\"../awaiter\")\n\n// we use relative path to avoid canonical path issue - e.g. /tmp vs /private/tmp\nexport function copyFiltered(src: string, destination: string, filter: (file: string) => boolean, dereference: boolean = false): Promise<any> {\n  return copy(src, destination, {\n    dereference: dereference,\n    filter: filter\n  })\n}\n\nexport function createFilter(src: string, patterns: Array<Minimatch>, ignoreFiles?: Set<string>, rawFilter?: (file: string) => boolean): (file: string) => boolean {\n  return function filter(it) {\n    if (src === it) {\n      return true\n    }\n\n    if (rawFilter != null && !rawFilter(it)) {\n      return false\n    }\n\n    let relative = it.substring(src.length + 1)\n\n    // yes, check before path sep normalization\n    if (ignoreFiles != null && ignoreFiles.has(relative)) {\n      return false\n    }\n\n    if (path.sep === \"\\\\\") {\n      relative = relative.replace(/\\\\/g, \"/\")\n    }\n    return minimatchAll(relative, patterns)\n  }\n}\n\nexport async function listDependencies(appDir: string, production: boolean): Promise<Array<string>> {\n  let npmExecPath = process.env.npm_execpath || process.env.NPM_CLI_JS\n  const npmExecArgs = [\"ls\", production ? \"--production\" : \"--dev\", \"--parseable\"]\n  if (npmExecPath == null) {\n    npmExecPath = process.platform === \"win32\" ? \"npm.cmd\" : \"npm\"\n  }\n  else {\n    npmExecArgs.unshift(npmExecPath)\n    npmExecPath = process.env.npm_node_execpath || process.env.NODE_EXE || \"node\"\n  }\n\n  const result = (await exec(npmExecPath, npmExecArgs, {\n    cwd: appDir,\n    stdio: \"inherit\",\n    maxBuffer: 1024 * 1024,\n  })).trim().split(\"\\n\")\n  if (result.length > 0 && !result[0].includes(\"/node_modules/\")) {\n    // first line is a project dir\n    const lastIndex = result.length - 1\n    result[0] = result[lastIndex]\n    result.length = result.length - 1\n  }\n  return result\n}\n\n// https://github.com/joshwnj/minimatch-all/blob/master/index.js\nfunction minimatchAll(path: string, patterns: Array<Minimatch>): boolean {\n  let match = false\n  for (let pattern of patterns) {\n    // If we've got a match, only re-test for exclusions.\n    // if we don't have a match, only re-test for inclusions.\n    if (match !== pattern.negate) {\n      continue\n    }\n\n    // partial match — pattern: foo/bar.txt path: foo — we must allow foo\n    // use it only for non-negate patterns: const m = new Minimatch(\"!node_modules/@(electron-download|electron-prebuilt)/**/*\", {dot: true }); m.match(\"node_modules\", true) will return false, but must be true\n    match = pattern.match(path, !pattern.negate)\n    if (!match && !pattern.negate) {\n      const rawPattern = pattern.pattern\n      // 1 - slash\n      const patternLengthPlusSlash = rawPattern.length + 1\n      if (path.length > patternLengthPlusSlash) {\n        // foo: include all directory content\n        match = path[rawPattern.length] === \"/\" && path.startsWith(rawPattern)\n      }\n    }\n  }\n  return match\n}"
  ]
}
